/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

import java.time.Instant

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

   withName: 'GTDBTK_CLASSIFYWF' {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_${Instant.now().toEpochMilli()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    }   
    
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BOWTIE2_ALIGN' {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename ->
                if (params.save_bam && filename.endsWith('.bam')) {
                    return filename  // Save .bam file if save_bam is true
                } else if (filename.endsWith('.bam') || filename.endsWith('.bt2')) {
                    return null // Do not publish .bam or .bt2 files by default
                }
                return filename // Save other files
        }
    ]
    }

    withName: 'BOWTIE2_BUILD' {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename ->
            if (filename.endsWith('.bam') || filename.endsWith('.bt2')) {
                return null // Do not publish
            }
            return filename
        }
    ]
    }
    
    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: INSTRAIN {
        ext.args = "${params.instrain_profile_args}"
    }

    withName: INSTRAINCOMPARE {
        ext.args = "${params.is_compare_args}"
        //ext.args = "pass"
    }

    withName: FASTP {
        ext.args = '--dedup'
    }

    withName: METABAT2_METABAT2 {
        ext.args = "${params.metabat2_args}"
    }

    withName: SPADES {
        ext.args = "--meta -k ${params.metaspades_kmer}"
    }

    withName: QUAST {
        ext.prefix = "quast_out"
    }

    withName: ABRICATE_RUN {
        ext.args = "--db plasmidfinder"
    }

    withName: PRODIGAL {
        ext.args = "-p meta"
    }

    withName: DIAMOND_BLASTP {
        ext.args = "-e 0.0001 -k 1 -b 5"
    }

    withName: GTDBTK_DB_PREPARATION {
        publishDir = [ enabled: false ]
    }

    withName: CHECKVDB_PREPARATION {
        publishDir = [ enabled: false ]
    }
    
    withName: PREPARE_DREP {
        publishDir = [ enabled: false ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
